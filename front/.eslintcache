[{"D:\\Zubavlenko\\front\\src\\index.js":"1","D:\\Zubavlenko\\front\\src\\App.js":"2","D:\\Zubavlenko\\front\\src\\reportWebVitals.js":"3","D:\\Zubavlenko\\front\\src\\fetchQueries\\card.service.js":"4","D:\\zubavlenko\\front\\src\\index.js":"5","D:\\zubavlenko\\front\\src\\App.js":"6","D:\\zubavlenko\\front\\src\\reportWebVitals.js":"7","D:\\zubavlenko\\front\\src\\fetchQueries\\card.service.js":"8"},{"size":550,"mtime":1610024979000,"results":"9","hashOfConfig":"10"},{"size":9607,"mtime":1610106540372,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":464,"mtime":1610052493590,"results":"13","hashOfConfig":"10"},{"size":550,"mtime":1610024979000,"results":"14","hashOfConfig":"15"},{"size":9160,"mtime":1610165918650,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":464,"mtime":1610052493590,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1o0y6va",{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"4j109y",{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"39"},"D:\\Zubavlenko\\front\\src\\index.js",[],["40","41"],"D:\\Zubavlenko\\front\\src\\App.js",["42","43","44"],"D:\\Zubavlenko\\front\\src\\reportWebVitals.js",[],"D:\\Zubavlenko\\front\\src\\fetchQueries\\card.service.js",["45"],"const START_URL = \"http://localhost:8080/\"\r\n\r\nconst getCardsByOrder = (order, numberOfPage, cardsPerPage) => {\r\n    return fetch(START_URL + 'getCardsByOrder', {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type' : 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({ order: order, numberOfPage: numberOfPage, cardsPerPage: cardsPerPage })\r\n    })\r\n}\r\n\r\nexport default {\r\n    getCardsByOrder\r\n}","D:\\zubavlenko\\front\\src\\index.js",[],["46","47"],"D:\\zubavlenko\\front\\src\\App.js",["48","49","50"],"import React, {useEffect, useState} from \"react\";\nimport cardsGetter from './fetchQueries/card.service'\nimport { Table,\n    ButtonGroup,\n    Nav,\n    Navbar,\n    CardImg,\n    Card,\n    Button,\n    Row\n} from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nfunction App() {\n\n    const [added, setAdded] = useState([]);\n    const [cards, setCards] = useState([]);\n    const [loading, setLoading] = useState(false)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [length, setLength] = useState(0)\n    const [cardPerPage, setCardsPerPage] = useState(10)\n\n    useEffect(()=>{\n            setLoading(true);\n            cardsGetter.getCardsByOrder(added, currentPage, cardPerPage)\n                .then(async (res)=>{\n                    let data = await res.json();\n                    setCards(data.cards)\n                    setLength(data.length)\n                })\n        setLoading(false);\n    })\n\n    const clear = () => {\n        setAdded([]);\n    }\n\n    const addHealth = (order) => {\n        // order = 'asc'/'desc'\n        let exists = false;\n        for (let i = 0; i < added.length; i++){\n            if (added[i].includes('health'))\n                exists = true\n        }\n        if (!exists) {\n            let newAdded = added;\n            newAdded.push(['health', order]);\n            setAdded(newAdded)\n            alert(added)\n        }\n    }\n\n    const addAttack = (order) => {\n        let exists = false;\n        for (let i = 0; i < added.length; i++){\n            if (added[i].includes('attack'))\n                exists = true\n        }\n        if (!exists) {\n            let newAdded = added;\n            newAdded.push(['attack',order]);\n            setAdded(newAdded)\n            alert(added)\n        }\n    }\n\n    const addName = (order) => {\n        let exists = false;\n        for (let i = 0; i < added.length; i++){\n            if (added[i].includes('name'))\n                exists = true\n        }\n        if (!exists) {\n            let newAdded = added;\n            newAdded.push(['name',order]);\n            setAdded(newAdded)\n            alert(added)\n        }\n    }\n\n    const addCost = (order) => {\n        let exists = false;\n        for (let i = 0; i < added.length; i++){\n            if (added[i].includes('cost'))\n                exists = true\n        }\n        if (!exists) {\n            let newAdded = added;\n            newAdded.push(['cost',order]);\n            setAdded(newAdded)\n            alert(added)\n        }\n    }\n\n    const setPage = (number) => {\n        setCurrentPage(number);\n    }\n    // MY FUCKING PAGINATION\n    let Pagination;\n    const first = '<<'\n    const previous = '<'\n    let closeButtons = [];\n    // PAGE 1\n    if (currentPage === 1){\n        for (let i = 2; i < 4; i++)\n            closeButtons.push((\n                <Button onClick={()=>{setPage(i)}}>{i}</Button>\n            ))\n        Pagination = (\n            <ButtonGroup>\n                <Button onClick={()=>{setPage(1)}} > {first} </Button>\n                <Button onClick={()=>{setPage(currentPage-1)}} > {previous} </Button>\n                <Button onClick={()=>{setPage(1)}} active={true}>1</Button>\n                {closeButtons}\n                <Button disabled active={false}>...</Button>\n                <Button onClick={()=>{setPage(currentPage+1)}} active={true}> > </Button>\n                <Button onClick={()=>{setPage(length)}} active={true}> >> </Button>\n            </ButtonGroup>\n        )}\n    // PAGE 2\n    else if ( currentPage === 2 ) {\n        for (let i = 3; i < 5; i++)\n            closeButtons.push((\n                <Button onClick={()=>{setPage(i)}}>{i}</Button>\n            ))\n        Pagination = (\n            <ButtonGroup>\n                <Button onClick={()=>{setPage(1)}} > {first} </Button>\n                <Button onClick={()=>{setPage(currentPage-1)}} > {previous} </Button>\n                <Button onClick={()=>{setPage(1)}}>1</Button>\n                <Button onClick={()=>{setPage(2)}} active={true}>2</Button>\n                {closeButtons}\n                <Button disabled active={false}>...</Button>\n                <Button onClick={()=>{setPage(currentPage+1)}} > > </Button>\n                <Button onClick={()=>{setPage(length)}}> >> </Button>\n            </ButtonGroup>\n        )\n    }\n    // PAGE 3\n    else if ( currentPage === 3 ) {\n        for (let i = 4; i < 6; i++)\n            closeButtons.push((\n                <Button onClick={()=>{setPage(i)}}>{i}</Button>\n            ))\n        Pagination = (\n            <ButtonGroup>\n                <Button onClick={()=>{setPage(1)}} > {first} </Button>\n                <Button onClick={()=>{setPage(currentPage-1)}} > {previous} </Button>\n                <Button disabled active={false}>...</Button>\n                <Button onClick={()=>{setPage(2)}}>2</Button>\n                <Button onClick={()=>{setPage(3)}} active={true}>3</Button>\n                {closeButtons}\n                <Button disabled active={false}>...</Button>\n                <Button onClick={()=>{setPage(currentPage+1)}} > > </Button>\n                <Button onClick={()=>{setPage(length)}}> >> </Button>\n            </ButtonGroup>\n        )\n    }\n\n    // LAST PAGE\n    else if (currentPage === length) {\n        for (let i = currentPage-3; i < currentPage+1; i++)\n            if (i === currentPage)\n                closeButtons.push((\n                    <Button onClick={()=>{setPage(i)}} active={true}>{i}</Button>\n                ))\n            else\n                closeButtons.push((\n                    <Button onClick={()=>{setPage(i)}}>{i}</Button>\n                ))\n        Pagination = (\n            <ButtonGroup>\n                <Button onClick={()=>{setPage(1)}} > {first} </Button>\n                <Button onClick={()=>{setPage(currentPage-1)}} > {previous} </Button>\n                <Button disabled active={false}>...</Button>\n                {closeButtons}\n                <Button disabled active={false}>...</Button>\n                <Button onClick={()=>{setPage(currentPage+1)}} > > </Button>\n                <Button onClick={()=>{setPage(length)}}> >> </Button>\n            </ButtonGroup>\n        )\n\n    }\n    else {\n        for (let i = currentPage-1; i < currentPage+3; i++)\n            if (i === currentPage)\n                closeButtons.push((\n                    <Button onClick={()=>{setPage(i)}} active={true}>{i}</Button>\n                ))\n            else\n                closeButtons.push((\n                    <Button onClick={()=>{setPage(i)}}>{i}</Button>\n                ))\n        Pagination = (\n            <ButtonGroup>\n                <Button onClick={()=>{setPage(1)}} > {first} </Button>\n                <Button onClick={()=>{setPage(currentPage-1)}} > {previous} </Button>\n                <Button disabled active={false}>...</Button>\n                {closeButtons}\n                <Button disabled active={false}>...</Button>\n                <Button onClick={()=>{setPage(currentPage+1)}} > > </Button>\n                <Button onClick={()=>{setPage(length)}}> >> </Button>\n            </ButtonGroup>\n        )\n    }\n    return (\n        <div>\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Heartstone</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Button onClick={clear}>Clear</Button>\n                </Nav>\n                <Nav>\n                    <Nav.Link href=\"/login\"><Button>Log in</Button></Nav.Link>\n                    <Nav.Link href=\"/reg\"><Button>Sing up</Button></Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n            <Table>\n                <thead>\n                    <th>Attack</th>\n                    <th>Cost</th>\n                    <th>Health</th>\n                    <th>Name</th>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td><Button as='input' value='DESC' onClick={()=> addAttack('DESC')}></Button><Button as='input' value='ASC' onClick={()=> addAttack('ASC')}></Button></td>\n                        <td><Button as='input' value='DESC' onClick={()=> addCost('DESC')}></Button><Button as='input' value='ASC' onClick={()=> addCost('ASC')}></Button></td>\n                        <td><Button as='input' value='DESC' onClick={()=> addHealth('DESC')}></Button><Button as='input' value='ASC' onClick={()=> addHealth('ASC')}></Button></td>\n                        <td><Button as='input' value='DESC' onClick={()=> addName('DESC')}></Button><Button as='input' value='ASC' onClick={()=> addName('ASC')}></Button></td>\n                    </tr>\n                </tbody>\n            </Table>\n            <Row>\n                {cards.map((card, key)=>{\n                    return (\n                        <Card>\n                            <CardImg style={{width: '300px', height: '300px'}} src={card}/>\n                        </Card>\n                    )\n                })}\n            </Row>\n            {Pagination}\n        </div>\n    );\n}\n\nexport default App;\n","D:\\zubavlenko\\front\\src\\reportWebVitals.js",[],"D:\\zubavlenko\\front\\src\\fetchQueries\\card.service.js",["51"],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":17,"column":12,"nodeType":"60","messageId":"61","endLine":17,"endColumn":19},{"ruleId":"58","severity":1,"message":"62","line":20,"column":25,"nodeType":"60","messageId":"61","endLine":20,"endColumn":40},{"ruleId":"63","severity":1,"message":"64","line":31,"column":7,"nodeType":"65","endLine":31,"endColumn":9,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":14,"column":1,"nodeType":"69","endLine":16,"endColumn":2},{"ruleId":"54","replacedBy":"70"},{"ruleId":"56","replacedBy":"71"},{"ruleId":"58","severity":1,"message":"59","line":17,"column":12,"nodeType":"60","messageId":"61","endLine":17,"endColumn":19},{"ruleId":"58","severity":1,"message":"62","line":20,"column":25,"nodeType":"60","messageId":"61","endLine":20,"endColumn":40},{"ruleId":"63","severity":1,"message":"72","line":22,"column":5,"nodeType":"60","endLine":22,"endColumn":14,"suggestions":"73"},{"ruleId":"67","severity":1,"message":"68","line":14,"column":1,"nodeType":"69","endLine":16,"endColumn":2},{"ruleId":"54","replacedBy":"74"},{"ruleId":"56","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'setCardsPerPage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'added', 'cardPerPage', and 'currentPage'. Either include them or remove the dependency array.","ArrayExpression",["78"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["76"],["77"],"React Hook useEffect contains a call to 'setLoading'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [added, currentPage, cardPerPage] as a second argument to the useEffect Hook.",["79"],["76"],["77"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [added, cardPerPage, currentPage]",{"range":"84","text":"85"},"Add dependencies array: [added, currentPage, cardPerPage]",{"range":"86","text":"87"},[928,930],"[added, cardPerPage, currentPage]",[928,928],", [added, currentPage, cardPerPage]"]